//BrainGrid Overview
//Written in the Dot language (See Graphviz)

digraph {
	 graph[splines=ortho,compound=true]




	subgraph clusterUtils {
		style = rounded
		bgcolor = grey90
		color = coral
		node [shape = record, color = coral];

		BGTypes[label = BGTypes, style = filled];
		Coordinate[label = Coordinate, style = filled];
		Global[label = Global, style = filled];
		ParseParamError[label = ParseParamError, style = filled];
		Timer[label = Timer, style = filled];
		Util[label = Util, style = filled];
		Utils[label =< <B> Utils</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.3; // Node Separation
		ranksep = 1.3; // Rank Separation


		//INHERITANCE//



		//COMPOSITION//


		Global -> BGTypes [style=invis];
		Global -> Coordinate [style=invis];
	}//end subgraph Utils


	subgraph paramcontainer {
		style = rounded
		bgcolor = grey90
		color = cyan
		node [shape = record, color = cyan];

		ParamContainer[label = ParamContainer, style = filled];
		paramcontainer[label =< <B> paramcontainer</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.3; // Node Separation
		ranksep = 1.3; // Rank Separation


		//INHERITANCE//



		//COMPOSITION//

	}//end subgraph paramcontainer


	subgraph clusterCore {
		style = rounded
		bgcolor = grey90
		color = darkgoldenrod
		node [shape = record, color = darkgoldenrod];

		Cluster[label = Cluster, style = filled];
		ClusterInfo[label = ClusterInfo, style = filled];
		EventQueue[label = EventQueue, style = filled];
		FClassOfCategory[label = FClassOfCategory, style = filled];
		GPUSpikingCluster[label = GPUSpikingCluster, style = filled];
		IModel[label = IModel, style = filled];
		InterClustersEventHandler[label = InterClustersEventHandler, style = filled];
		Model[label = Model, style = filled];
		SimulationInfo[label = SimulationInfo, style = filled];
		Simulator[label = Simulator, style = filled];
		SingleThreadedCluster[label = SingleThreadedCluster, style = filled];
		SynapseIndexMap[label = SynapseIndexMap, style = filled];
		Core[label =< <B> Core</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.3; // Node Separation
		ranksep = 1.3; // Rank Separation


		//INHERITANCE//


		GPUSpikingCluster -> Model [style=invis];

		Model -> IModel [style=invis];

		SingleThreadedCluster -> Cluster [style=invis];


		//COMPOSITION//


		Cluster -> SimulationInfo [style=invis];

		ClusterInfo -> InterClustersEventHandler [style=invis];

		EventQueue -> InterClustersEventHandler [style=invis];
		EventQueue -> SimulationInfo [style=invis];
		EventQueue -> SynapseIndexMap [style=invis];

		IModel -> Cluster [style=invis];
		IModel -> SimulationInfo [style=invis];

		InterClustersEventHandler -> EventQueue [style=invis];

		Model -> GPUSpikingCluster [style=invis];
		Model -> SynapseIndexMap [style=invis];

		Simulator -> IModel [style=invis];
		Simulator -> SimulationInfo [style=invis];

		SynapseIndexMap -> Cluster [style=invis];
		SynapseIndexMap -> ClusterInfo [style=invis];
		SynapseIndexMap -> GPUSpikingCluster [style=invis];
		SynapseIndexMap -> SimulationInfo [style=invis];
	}//end subgraph Core


	subgraph clusterRecorders {
		style = rounded
		bgcolor = grey90
		color = darkorange
		node [shape = record, color = darkorange];

		Hdf5GrowthRecorder[label = Hdf5GrowthRecorder, style = filled];
		Hdf5Recorder[label = Hdf5Recorder, style = filled];
		IRecorder[label = IRecorder, style = filled];
		XmlGrowthRecorder[label = XmlGrowthRecorder, style = filled];
		XmlRecorder[label = XmlRecorder, style = filled];
		Recorders[label =< <B> Recorders</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.3; // Node Separation
		ranksep = 1.3; // Rank Separation


		//INHERITANCE//


		Hdf5GrowthRecorder -> Hdf5Recorder [style=invis];

		Hdf5Recorder -> IRecorder [style=invis];

		XmlGrowthRecorder -> XmlRecorder [style=invis];

		XmlRecorder -> IRecorder [style=invis];


		//COMPOSITION//

	}//end subgraph Recorders


	subgraph clusterInputs {
		style = rounded
		bgcolor = grey90
		color = darksalmon
		node [shape = record, color = darksalmon];

		FSInput[label = FSInput, style = filled];
		GpuSInputPoisson[label = GpuSInputPoisson, style = filled];
		GpuSInputRegular[label = GpuSInputRegular, style = filled];
		HostSInputPoisson[label = HostSInputPoisson, style = filled];
		HostSInputRegular[label = HostSInputRegular, style = filled];
		ISInput[label = ISInput, style = filled];
		SInputPoisson[label = SInputPoisson, style = filled];
		SInputRegular[label = SInputRegular, style = filled];
		Inputs[label =< <B> Inputs</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.3; // Node Separation
		ranksep = 1.3; // Rank Separation


		//INHERITANCE//


		GpuSInputPoisson -> SInputPoisson [style=invis];

		GpuSInputRegular -> SInputRegular [style=invis];

		HostSInputPoisson -> SInputPoisson [style=invis];

		HostSInputRegular -> SInputRegular [style=invis];

		SInputPoisson -> ISInput [style=invis];

		SInputRegular -> ISInput [style=invis];


		//COMPOSITION//


		FSInput -> GpuSInputPoisson [style=invis];
		FSInput -> GpuSInputRegular [style=invis];
		FSInput -> HostSInputPoisson [style=invis];
		FSInput -> HostSInputRegular [style=invis];
		FSInput -> ISInput [style=invis];
	}//end subgraph Inputs


	subgraph clusterNeurons {
		style = rounded
		bgcolor = grey90
		color = darkturquoise
		node [shape = record, color = darkturquoise];

		AllIFNeurons[label = AllIFNeurons, style = filled];
		AllIZHNeurons[label = AllIZHNeurons, style = filled];
		AllLIFNeurons[label = AllLIFNeurons, style = filled];
		AllNeurons[label = AllNeurons, style = filled];
		AllSpikingNeurons[label = AllSpikingNeurons, style = filled];
		IAllNeurons[label = IAllNeurons, style = filled];
		Neurons[label =< <B> Neurons</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.3; // Node Separation
		ranksep = 1.3; // Rank Separation


		//INHERITANCE//


		AllIFNeurons -> AllSpikingNeurons [style=invis];

		AllIZHNeurons -> AllIFNeurons [style=invis];

		AllLIFNeurons -> AllIFNeurons [style=invis];

		AllNeurons -> IAllNeurons [style=invis];

		AllSpikingNeurons -> AllNeurons [style=invis];


		//COMPOSITION//

	}//end subgraph Neurons


	subgraph clusterSynapses {
		style = rounded
		bgcolor = grey90
		color = gold
		node [shape = record, color = gold];

		AllDSSynapses[label = AllDSSynapses, style = filled];
		AllDynamicSTDPSynapses[label = AllDynamicSTDPSynapses, style = filled];
		AllSTDPSynapses[label = AllSTDPSynapses, style = filled];
		AllSpikingSynapses[label = AllSpikingSynapses, style = filled];
		AllSynapses[label = AllSynapses, style = filled];
		AllSynapsesDeviceFuncs[label = AllSynapsesDeviceFuncs, style = filled];
		IAllSynapses[label = IAllSynapses, style = filled];
		Synapses[label =< <B> Synapses</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.3; // Node Separation
		ranksep = 1.3; // Rank Separation


		//INHERITANCE//


		AllDSSynapses -> AllSpikingSynapses [style=invis];

		AllDynamicSTDPSynapses -> AllSTDPSynapses [style=invis];

		AllSTDPSynapses -> AllSpikingSynapses [style=invis];

		AllSpikingSynapses -> AllSynapses [style=invis];

		AllSynapses -> IAllSynapses [style=invis];


		//COMPOSITION//


		AllSynapsesDeviceFuncs -> AllDSSynapses [style=invis];
		AllSynapsesDeviceFuncs -> AllSTDPSynapses [style=invis];
		AllSynapsesDeviceFuncs -> AllSpikingSynapses [style=invis];
	}//end subgraph Synapses


	subgraph clusterConnections {
		style = rounded
		bgcolor = grey90
		color = hotpink
		node [shape = record, color = hotpink];

		ConnGrowth[label = ConnGrowth, style = filled];
		ConnStatic[label = ConnStatic, style = filled];
		Connections[label = Connections, style = filled];
		Connections[label =< <B> Connections</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.3; // Node Separation
		ranksep = 1.3; // Rank Separation


		//INHERITANCE//


		ConnGrowth -> Connections [style=invis];

		ConnStatic -> Connections [style=invis];


		//COMPOSITION//

	}//end subgraph Connections


	subgraph clusterLayouts {
		style = rounded
		bgcolor = grey90
		color = indianred
		node [shape = record, color = indianred];

		DynamicLayout[label = DynamicLayout, style = filled];
		FixedLayout[label = FixedLayout, style = filled];
		Layout[label = Layout, style = filled];
		Layouts[label =< <B> Layouts</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.3; // Node Separation
		ranksep = 1.3; // Rank Separation


		//INHERITANCE//


		DynamicLayout -> Layout [style=invis];

		FixedLayout -> Layout [style=invis];


		//COMPOSITION//

	}//end subgraph Layouts


	subgraph clusterRNG {
		style = rounded
		bgcolor = grey90
		color = limegreen
		node [shape = record, color = limegreen];

		MersenneTwister[label = MersenneTwister, style = filled];
		MersenneTwister_d[label = MersenneTwister_d, style = filled];
		Norm[label = Norm, style = filled];
		RNG[label =< <B> RNG</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.3; // Node Separation
		ranksep = 1.3; // Rank Separation


		//INHERITANCE//



		//COMPOSITION//


		Norm -> MersenneTwister [style=invis];
	}//end subgraph RNG


	subgraph clusterMatrix {
		style = rounded
		bgcolor = grey90
		color = mediumseagreen
		node [shape = record, color = mediumseagreen];

		CompleteMatrix[label = CompleteMatrix, style = filled];
		Matrix[label = Matrix, style = filled];
		MatrixExceptions[label = MatrixExceptions, style = filled];
		SparseMatrix[label = SparseMatrix, style = filled];
		VectorMatrix[label = VectorMatrix, style = filled];
		Matrix[label =< <B> Matrix</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.3; // Node Separation
		ranksep = 1.3; // Rank Separation


		//INHERITANCE//


		CompleteMatrix -> Matrix [style=invis];
		CompleteMatrix -> VectorMatrix [style=invis];

		VectorMatrix -> CompleteMatrix [style=invis];
		VectorMatrix -> Matrix [style=invis];
		VectorMatrix -> SparseMatrix [style=invis];


		//COMPOSITION//


		Matrix -> MatrixExceptions [style=invis];

		SparseMatrix -> Matrix [style=invis];
		SparseMatrix -> VectorMatrix [style=invis];
	}//end subgraph Matrix


	subgraph clustertinyxml {
		style = rounded
		bgcolor = grey90
		color = mediumturquoise
		node [shape = record, color = mediumturquoise];

		tinystr[label = tinystr, style = filled];
		tinyxml[label = tinyxml, style = filled];
		tinyxml[label =< <B> tinyxml</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.3; // Node Separation
		ranksep = 1.3; // Rank Separation


		//INHERITANCE//



		//COMPOSITION//


		tinyxml -> tinystr [style=invis];
	}//end subgraph tinyxml


	subgraph NAME_ERROR {
		node [shape = record];


		BGDriver[label = BGDriver, style = filled];
		NAME_ERROR[label = NAME_ERROR, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.3; // Node Separation
		ranksep = 1.3; // Rank Separation


		//INHERITANCE//



		//COMPOSITION//

	}//end subgraph NAME_ERROR


	subgraph NAME_ERROR {
		node [shape = record];


		bgtypes[label = bgtypes, style = filled];
		NAME_ERROR[label = NAME_ERROR, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.3; // Node Separation
		ranksep = 1.3; // Rank Separation


		//INHERITANCE//



		//COMPOSITION//

	}//end subgraph NAME_ERROR


	subgraph NAME_ERROR {
		node [shape = record];


		curand_kernel[label = curand_kernel, style = filled];
		NAME_ERROR[label = NAME_ERROR, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.3; // Node Separation
		ranksep = 1.3; // Rank Separation


		//INHERITANCE//



		//COMPOSITION//

	}//end subgraph NAME_ERROR


	subgraph NAME_ERROR {
		node [shape = record];


		H5Cpp[label = H5Cpp, style = filled];
		NAME_ERROR[label = NAME_ERROR, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.3; // Node Separation
		ranksep = 1.3; // Rank Separation


		//INHERITANCE//



		//COMPOSITION//

	}//end subgraph NAME_ERROR
//-------LAYOUT OF RELATIONSHIPS BETWEEN SUBGRAPHS------//
rankdir = BT; // Rank Direction Top to Bottom
nodesep = 0.325; // Node Separation
ranksep = 0.325; // Rank Separation


edge [color=darkturquoise];
Neurons -> Core [arrowhead=ediamond, ltail = clusterNeurons,lhead = clusterCore];

edge [color=darkorange];
Recorders -> Core [arrowhead=ediamond, ltail = clusterRecorders,lhead = clusterCore];

edge [color=darksalmon];
Inputs -> curand_kernel [arrowhead=ediamond, ltail = clusterInputs,];

edge [color=gold];
Synapses -> Utils [arrowhead=ediamond, ltail = clusterSynapses,lhead = clusterUtils];

edge [color=darkgoldenrod];
Core -> curand_kernel [arrowhead=ediamond, ltail = clusterCore,];
Core -> Neurons [arrowhead=ediamond, ltail = clusterCore,lhead = clusterNeurons];

edge [color=hotpink];
Connections -> Core [arrowhead=ediamond, ltail = clusterConnections,lhead = clusterCore];

edge [color=mediumseagreen];
Matrix -> tinyxml [arrowhead=ediamond, ltail = clusterMatrix,lhead = clustertinyxml];

edge [color=darksalmon];
Inputs -> Synapses [arrowhead=ediamond, ltail = clusterInputs,lhead = clusterSynapses];

edge [color=black];
BGDriver -> Utils [arrowhead=ediamond, lhead = clusterUtils];

edge [color=darkgoldenrod];
Core -> RNG [arrowhead=ediamond, ltail = clusterCore,lhead = clusterRNG];
Core -> Utils [arrowhead=ediamond, ltail = clusterCore,lhead = clusterUtils];
Core -> Layouts [arrowhead=ediamond, ltail = clusterCore,lhead = clusterLayouts];

edge [color=darkturquoise];
Neurons -> Utils [arrowhead=ediamond, ltail = clusterNeurons,lhead = clusterUtils];

edge [color=darkorange];
Recorders -> Neurons [arrowhead=ediamond, ltail = clusterRecorders,lhead = clusterNeurons];

edge [color=black];
BGDriver -> Recorders [arrowhead=ediamond, lhead = clusterRecorders];

edge [color=gold];
Synapses -> Core [arrowhead=ediamond, ltail = clusterSynapses,lhead = clusterCore];

edge [color=darkturquoise];
Neurons -> Synapses [arrowhead=ediamond, ltail = clusterNeurons,lhead = clusterSynapses];

edge [color=hotpink];
Connections -> Utils [arrowhead=ediamond, ltail = clusterConnections,lhead = clusterUtils];

edge [color=darkgoldenrod];
Core -> Connections [arrowhead=ediamond, ltail = clusterCore,lhead = clusterConnections];

edge [color=coral];
Utils -> Matrix [arrowhead=ediamond, ltail = clusterUtils,lhead = clusterMatrix];

edge [color=hotpink];
Connections -> Synapses [arrowhead=ediamond, ltail = clusterConnections,lhead = clusterSynapses];

edge [color=mediumseagreen];
Matrix -> Utils [arrowhead=ediamond, ltail = clusterMatrix,lhead = clusterUtils];

edge [color=black];
BGDriver -> Core [arrowhead=ediamond, lhead = clusterCore];

edge [color=darkgoldenrod];
Core -> Synapses [arrowhead=ediamond, ltail = clusterCore,lhead = clusterSynapses];

edge [color=darksalmon];
Inputs -> Core [arrowhead=ediamond, ltail = clusterInputs,lhead = clusterCore];

edge [color=darkgoldenrod];
Core -> Inputs [arrowhead=ediamond, ltail = clusterCore,lhead = clusterInputs];

edge [color=coral];
Utils -> bgtypes [arrowhead=ediamond, ltail = clusterUtils,];

edge [color=darksalmon];
Inputs -> tinyxml [arrowhead=ediamond, ltail = clusterInputs,lhead = clustertinyxml];

edge [color=hotpink];
Connections -> Recorders [arrowhead=ediamond, ltail = clusterConnections,lhead = clusterRecorders];

edge [color=darkorange];
Recorders -> Connections [arrowhead=ediamond, ltail = clusterRecorders,lhead = clusterConnections];

edge [color=indianred];
Layouts -> Utils [arrowhead=ediamond, ltail = clusterLayouts,lhead = clusterUtils];

edge [color=gold];
Synapses -> Neurons [arrowhead=ediamond, ltail = clusterSynapses,lhead = clusterNeurons];

edge [color=limegreen];
RNG -> Utils [arrowhead=ediamond, ltail = clusterRNG,lhead = clusterUtils];
}//End digraph declaration
