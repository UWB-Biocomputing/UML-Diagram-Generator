//BrainGrid Overview
//Written in the Dot language (See Graphviz)

digraph {
	 graph[splines=ortho,compound=true]




	subgraph clusterUtils {
		style = rounded
		bgcolor = grey90
		color = coral
		node [shape = record, color = coral];

		BGTypes[label = BGTypes, style = filled];
		Coordinate[label = Coordinate, style = filled];
		Global[label = Global, style = filled];
		ParseParamError[label = ParseParamError, style = filled];
		Timer[label = Timer, style = filled];
		Util[label = Util, style = filled];
		Utils[label =< <B> Utils</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.5; // Node Separation
		ranksep = 1.5; // Rank Separation


		//INHERITANCE//



		//COMPOSITION//


		BGTypes -> Global [style=invis];
		Coordinate -> Global [style=invis];
	}//end subgraph Utils


	subgraph paramcontainer {
		style = rounded
		bgcolor = grey90
		color = cyan
		node [shape = record, color = cyan];

		ParamContainer[label = ParamContainer, style = filled];
		paramcontainer[label =< <B> paramcontainer</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.5; // Node Separation
		ranksep = 1.5; // Rank Separation


		//INHERITANCE//



		//COMPOSITION//

	}//end subgraph paramcontainer


	subgraph clusterCore {
		style = rounded
		bgcolor = grey90
		color = darkgoldenrod
		node [shape = record, color = darkgoldenrod];

		Cluster[label = Cluster, style = filled];
		ClusterInfo[label = ClusterInfo, style = filled];
		EventQueue[label = EventQueue, style = filled];
		FClassOfCategory[label = FClassOfCategory, style = filled];
		GPUSpikingCluster[label = GPUSpikingCluster, style = filled];
		IModel[label = IModel, style = filled];
		InterClustersEventHandler[label = InterClustersEventHandler, style = filled];
		Model[label = Model, style = filled];
		SimulationInfo[label = SimulationInfo, style = filled];
		Simulator[label = Simulator, style = filled];
		SingleThreadedCluster[label = SingleThreadedCluster, style = filled];
		SynapseIndexMap[label = SynapseIndexMap, style = filled];
		Core[label =< <B> Core</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.5; // Node Separation
		ranksep = 1.5; // Rank Separation


		//INHERITANCE//


		GPUSpikingCluster -> Cluster [style=invis];
		GPUSpikingCluster -> Model [style=invis];

		Model -> IModel [style=invis];

		SingleThreadedCluster -> Cluster [style=invis];


		//COMPOSITION//


		SimulationInfo -> Cluster [style=invis];

		InterClustersEventHandler -> ClusterInfo [style=invis];

		InterClustersEventHandler -> EventQueue [style=invis];
		SimulationInfo -> EventQueue [style=invis];
		SynapseIndexMap -> EventQueue [style=invis];

		Cluster -> IModel [style=invis];
		SimulationInfo -> IModel [style=invis];

		EventQueue -> InterClustersEventHandler [style=invis];

		GPUSpikingCluster -> Model [style=invis];
		SynapseIndexMap -> Model [style=invis];

		IModel -> Simulator [style=invis];
		SimulationInfo -> Simulator [style=invis];

		Cluster -> SynapseIndexMap [style=invis];
		ClusterInfo -> SynapseIndexMap [style=invis];
		GPUSpikingCluster -> SynapseIndexMap [style=invis];
		SimulationInfo -> SynapseIndexMap [style=invis];
	}//end subgraph Core


	subgraph clusterRecorders {
		style = rounded
		bgcolor = grey90
		color = darkorange
		node [shape = record, color = darkorange];

		Hdf5GrowthRecorder[label = Hdf5GrowthRecorder, style = filled];
		Hdf5Recorder[label = Hdf5Recorder, style = filled];
		IRecorder[label = IRecorder, style = filled];
		XmlGrowthRecorder[label = XmlGrowthRecorder, style = filled];
		XmlRecorder[label = XmlRecorder, style = filled];
		Recorders[label =< <B> Recorders</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.5; // Node Separation
		ranksep = 1.5; // Rank Separation


		//INHERITANCE//


		Hdf5GrowthRecorder -> Hdf5Recorder [style=invis];

		Hdf5Recorder -> IRecorder [style=invis];

		XmlGrowthRecorder -> XmlRecorder [style=invis];

		XmlRecorder -> IRecorder [style=invis];


		//COMPOSITION//

	}//end subgraph Recorders


	subgraph clusterInputs {
		style = rounded
		bgcolor = grey90
		color = darksalmon
		node [shape = record, color = darksalmon];

		FSInput[label = FSInput, style = filled];
		GpuSInputPoisson[label = GpuSInputPoisson, style = filled];
		GpuSInputRegular[label = GpuSInputRegular, style = filled];
		HostSInputPoisson[label = HostSInputPoisson, style = filled];
		HostSInputRegular[label = HostSInputRegular, style = filled];
		ISInput[label = ISInput, style = filled];
		SInputPoisson[label = SInputPoisson, style = filled];
		SInputRegular[label = SInputRegular, style = filled];
		Inputs[label =< <B> Inputs</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.5; // Node Separation
		ranksep = 1.5; // Rank Separation


		//INHERITANCE//


		GpuSInputPoisson -> SInputPoisson [style=invis];

		GpuSInputRegular -> SInputRegular [style=invis];

		HostSInputPoisson -> SInputPoisson [style=invis];

		HostSInputRegular -> SInputRegular [style=invis];

		SInputPoisson -> ISInput [style=invis];

		SInputRegular -> ISInput [style=invis];


		//COMPOSITION//


		GpuSInputPoisson -> FSInput [style=invis];
		GpuSInputRegular -> FSInput [style=invis];
		HostSInputPoisson -> FSInput [style=invis];
		HostSInputRegular -> FSInput [style=invis];
		ISInput -> FSInput [style=invis];
	}//end subgraph Inputs


	subgraph clusterNeurons {
		style = rounded
		bgcolor = grey90
		color = darkturquoise
		node [shape = record, color = darkturquoise];

		AllIFNeurons[label = AllIFNeurons, style = filled];
		AllIFNeuronsProps[label = AllIFNeuronsProps, style = filled];
		AllIZHNeurons[label = AllIZHNeurons, style = filled];
		AllIZHNeuronsProps[label = AllIZHNeuronsProps, style = filled];
		AllLIFNeurons[label = AllLIFNeurons, style = filled];
		AllNeurons[label = AllNeurons, style = filled];
		AllNeuronsProps[label = AllNeuronsProps, style = filled];
		AllSpikingNeurons[label = AllSpikingNeurons, style = filled];
		AllSpikingNeuronsProps[label = AllSpikingNeuronsProps, style = filled];
		IAllNeurons[label = IAllNeurons, style = filled];
		IAllNeuronsProps[label = IAllNeuronsProps, style = filled];
		Neurons[label =< <B> Neurons</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.5; // Node Separation
		ranksep = 1.5; // Rank Separation


		//INHERITANCE//


		AllIFNeurons -> AllSpikingNeurons [style=invis];

		AllIFNeuronsProps -> AllSpikingNeuronsProps [style=invis];

		AllIZHNeurons -> AllIFNeurons [style=invis];

		AllIZHNeuronsProps -> AllIFNeuronsProps [style=invis];

		AllLIFNeurons -> AllIFNeurons [style=invis];

		AllNeurons -> AllNeuronsProps [style=invis];
		AllNeurons -> IAllNeurons [style=invis];

		AllNeuronsProps -> IAllNeuronsProps [style=invis];

		AllSpikingNeurons -> AllNeurons [style=invis];

		AllSpikingNeuronsProps -> AllNeuronsProps [style=invis];


		//COMPOSITION//


		AllIFNeuronsProps -> AllIFNeurons [style=invis];

		AllIZHNeuronsProps -> AllIZHNeurons [style=invis];

		AllSpikingNeuronsProps -> AllSpikingNeurons [style=invis];
	}//end subgraph Neurons


	subgraph clusterSynapses {
		style = rounded
		bgcolor = grey90
		color = gold
		node [shape = record, color = gold];

		AllDSSynapses[label = AllDSSynapses, style = filled];
		AllDSSynapsesProps[label = AllDSSynapsesProps, style = filled];
		AllDynamicSTDPSynapses[label = AllDynamicSTDPSynapses, style = filled];
		AllDynamicSTDPSynapsesProps[label = AllDynamicSTDPSynapsesProps, style = filled];
		AllSTDPSynapses[label = AllSTDPSynapses, style = filled];
		AllSTDPSynapsesProps[label = AllSTDPSynapsesProps, style = filled];
		AllSpikingSynapses[label = AllSpikingSynapses, style = filled];
		AllSpikingSynapsesProps[label = AllSpikingSynapsesProps, style = filled];
		AllSynapses[label = AllSynapses, style = filled];
		AllSynapsesProps[label = AllSynapsesProps, style = filled];
		IAllSynapses[label = IAllSynapses, style = filled];
		IAllSynapsesProps[label = IAllSynapsesProps, style = filled];
		Synapses[label =< <B> Synapses</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.5; // Node Separation
		ranksep = 1.5; // Rank Separation


		//INHERITANCE//


		AllDSSynapses -> AllSpikingSynapses [style=invis];

		AllDSSynapsesProps -> AllSpikingSynapsesProps [style=invis];

		AllDynamicSTDPSynapses -> AllSTDPSynapses [style=invis];

		AllDynamicSTDPSynapsesProps -> AllSTDPSynapsesProps [style=invis];

		AllSTDPSynapses -> AllSTDPSynapsesProps [style=invis];
		AllSTDPSynapses -> AllSpikingSynapses [style=invis];

		AllSTDPSynapsesProps -> AllSpikingSynapsesProps [style=invis];

		AllSpikingSynapses -> AllSpikingSynapsesProps [style=invis];
		AllSpikingSynapses -> AllSynapses [style=invis];

		AllSpikingSynapsesProps -> AllSynapsesProps [style=invis];

		AllSynapses -> AllSynapsesProps [style=invis];
		AllSynapses -> IAllSynapses [style=invis];

		AllSynapsesProps -> IAllSynapsesProps [style=invis];


		//COMPOSITION//


		AllDSSynapsesProps -> AllDSSynapses [style=invis];

		AllDynamicSTDPSynapsesProps -> AllDynamicSTDPSynapses [style=invis];

		IAllSynapsesProps -> IAllSynapses [style=invis];
	}//end subgraph Synapses


	subgraph clusterConnections {
		style = rounded
		bgcolor = grey90
		color = hotpink
		node [shape = record, color = hotpink];

		ConnGrowth[label = ConnGrowth, style = filled];
		ConnStatic[label = ConnStatic, style = filled];
		Connections[label = Connections, style = filled];
		Connections[label =< <B> Connections</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.5; // Node Separation
		ranksep = 1.5; // Rank Separation


		//INHERITANCE//


		ConnGrowth -> Connections [style=invis];

		ConnStatic -> Connections [style=invis];


		//COMPOSITION//

	}//end subgraph Connections


	subgraph clusterLayouts {
		style = rounded
		bgcolor = grey90
		color = indianred
		node [shape = record, color = indianred];

		DynamicLayout[label = DynamicLayout, style = filled];
		FixedLayout[label = FixedLayout, style = filled];
		Layout[label = Layout, style = filled];
		Layouts[label =< <B> Layouts</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.5; // Node Separation
		ranksep = 1.5; // Rank Separation


		//INHERITANCE//


		DynamicLayout -> Layout [style=invis];

		FixedLayout -> Layout [style=invis];


		//COMPOSITION//

	}//end subgraph Layouts


	subgraph clusterRNG {
		style = rounded
		bgcolor = grey90
		color = limegreen
		node [shape = record, color = limegreen];

		MersenneTwister[label = MersenneTwister, style = filled];
		MersenneTwister_d[label = MersenneTwister_d, style = filled];
		Norm[label = Norm, style = filled];
		RNG[label =< <B> RNG</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.5; // Node Separation
		ranksep = 1.5; // Rank Separation


		//INHERITANCE//



		//COMPOSITION//


		MersenneTwister -> Norm [style=invis];
	}//end subgraph RNG


	subgraph clusterMatrix {
		style = rounded
		bgcolor = grey90
		color = mediumseagreen
		node [shape = record, color = mediumseagreen];

		CompleteMatrix[label = CompleteMatrix, style = filled];
		Matrix[label = Matrix, style = filled];
		MatrixExceptions[label = MatrixExceptions, style = filled];
		SparseMatrix[label = SparseMatrix, style = filled];
		VectorMatrix[label = VectorMatrix, style = filled];
		Matrix[label =< <B> Matrix</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.5; // Node Separation
		ranksep = 1.5; // Rank Separation


		//INHERITANCE//


		CompleteMatrix -> Matrix [style=invis];
		CompleteMatrix -> VectorMatrix [style=invis];

		VectorMatrix -> CompleteMatrix [style=invis];
		VectorMatrix -> Matrix [style=invis];
		VectorMatrix -> SparseMatrix [style=invis];


		//COMPOSITION//


		MatrixExceptions -> Matrix [style=invis];

		Matrix -> SparseMatrix [style=invis];
		VectorMatrix -> SparseMatrix [style=invis];
	}//end subgraph Matrix


	subgraph clustertinyxml {
		style = rounded
		bgcolor = grey90
		color = mediumturquoise
		node [shape = record, color = mediumturquoise];

		tinystr[label = tinystr, style = filled];
		tinyxml[label = tinyxml, style = filled];
		tinyxml[label =< <B> tinyxml</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 1.5; // Node Separation
		ranksep = 1.5; // Rank Separation


		//INHERITANCE//



		//COMPOSITION//


		tinystr -> tinyxml [style=invis];
	}//end subgraph tinyxml
//-------LAYOUT OF RELATIONSHIPS BETWEEN SUBGRAPHS------//
rankdir = BT; // Rank Direction Top to Bottom
nodesep = 0.375; // Node Separation
ranksep = 1.5; // Rank Separation


edge [color=darkgoldenrod];
SimulationInfo -> TiXmlVisitor [arrowhead=empty];
SimulationInfo -> Timer [arrowhead=empty];

edge [color=mediumseagreen];
VectorMatrix -> Norm [arrowhead=empty];

edge [color=limegreen];
Norm -> MTRand [arrowhead=empty];

edge [color=darkturquoise];
AllSpikingNeurons -> AllSpikingSynapses [arrowhead=empty];
AllSpikingNeurons -> SimulationInfo [arrowhead=empty];
AllSpikingNeuronsProps -> Cluster [arrowhead=empty];

edge [color=darkgoldenrod];
GPUSpikingCluster -> AllSpikingNeurons [arrowhead=empty];
GPUSpikingCluster -> AllSpikingNeuronsProps [arrowhead=empty];
GPUSpikingCluster -> AllSpikingSynapses [arrowhead=empty];
GPUSpikingCluster -> AllSpikingSynapsesProps [arrowhead=empty];

edge [color=gold];
AllSpikingSynapsesProps -> EventQueue [arrowhead=empty];
AllSynapses -> AllNeurons [arrowhead=empty];
AllSynapses -> SynapseIndexMap [arrowhead=empty];
AllSynapses -> Global [arrowhead=empty];
AllSynapses -> SimulationInfo [arrowhead=empty];

edge [color=darkturquoise];
AllNeurons -> Global [arrowhead=empty];
AllNeurons -> SimulationInfo [arrowhead=empty];
AllNeurons -> Layout [arrowhead=empty];

edge [color=darkgoldenrod];
Model -> Layout [arrowhead=empty];

edge [color=hotpink];
ConnGrowth -> IAllSynapses [arrowhead=empty];
ConnGrowth -> SimulationInfo [arrowhead=empty];

edge [color=darkorange];
Hdf5Recorder -> Model [arrowhead=empty];
XmlRecorder -> Model [arrowhead=empty];

edge [color=darkgoldenrod];
FClassOfCategory -> TiXmlVisitor [arrowhead=empty];
FClassOfCategory -> IAllNeurons [arrowhead=empty];
FClassOfCategory -> IAllSynapses [arrowhead=empty];
FClassOfCategory -> Connections [arrowhead=empty];
FClassOfCategory -> Layout [arrowhead=empty];

edge [color=hotpink];
ConnStatic -> IAllSynapses [arrowhead=empty];
ConnStatic -> SimulationInfo [arrowhead=empty];

edge [color=gold];
AllSTDPSynapsesProps -> EventQueue [arrowhead=empty];
AllSTDPSynapses -> IAllNeurons [arrowhead=empty];

edge [color=darkturquoise];
AllIZHNeurons -> Global [arrowhead=empty];
AllLIFNeurons -> Global [arrowhead=empty];

edge [color=black];
Global -> BGDriver [arrowhead=ediamond];
ParamContainer -> BGDriver [arrowhead=ediamond];
Model -> BGDriver [arrowhead=ediamond];
FClassOfCategory -> BGDriver [arrowhead=ediamond];
IRecorder -> BGDriver [arrowhead=ediamond];
FSInput -> BGDriver [arrowhead=ediamond];
Simulator -> BGDriver [arrowhead=ediamond];
GPUSpikingCluster -> BGDriver [arrowhead=ediamond];
SingleThreadedCluster -> BGDriver [arrowhead=ediamond];

edge [color=darkgoldenrod];
ISInput -> SingleThreadedCluster [arrowhead=ediamond];
ISInput -> Cluster [arrowhead=ediamond];
Global -> Cluster [arrowhead=ediamond];
IAllNeurons -> Cluster [arrowhead=ediamond];
IAllSynapses -> Cluster [arrowhead=ediamond];
Connections -> Cluster [arrowhead=ediamond];
Layout -> Cluster [arrowhead=ediamond];

edge [color=indianred];
ParseParamError -> Layout [arrowhead=ediamond];
Util -> Layout [arrowhead=ediamond];
Global -> Layout [arrowhead=ediamond];
SimulationInfo -> Layout [arrowhead=ediamond];

edge [color=darkgoldenrod];
ParseParamError -> SimulationInfo [arrowhead=ediamond];
Global -> SimulationInfo [arrowhead=ediamond];

edge [color=coral];
bgtypes -> Global [arrowhead=ediamond];
Norm -> Global [arrowhead=ediamond];
VectorMatrix -> Global [arrowhead=ediamond];

edge [color=mediumseagreen];
Global -> VectorMatrix [arrowhead=ediamond];

edge [color=limegreen];
BGTypes -> MersenneTwister [arrowhead=ediamond];

edge [color=mediumseagreen];
Global -> SparseMatrix [arrowhead=ediamond];
tinyxml -> Matrix [arrowhead=ediamond];

edge [color=mediumturquoise];
BGTypes -> tinyxml [arrowhead=ediamond];

edge [color=mediumseagreen];
Global -> CompleteMatrix [arrowhead=ediamond];

edge [color=hotpink];
ParseParamError -> Connections [arrowhead=ediamond];
IAllSynapses -> Connections [arrowhead=ediamond];
Global -> Connections [arrowhead=ediamond];
SimulationInfo -> Connections [arrowhead=ediamond];
AllSpikingNeurons -> Connections [arrowhead=ediamond];
AllSpikingSynapses -> Connections [arrowhead=ediamond];
Layout -> Connections [arrowhead=ediamond];
IRecorder -> Connections [arrowhead=ediamond];

edge [color=darkorange];
Global -> IRecorder [arrowhead=ediamond];
SimulationInfo -> IRecorder [arrowhead=ediamond];
AllSpikingNeurons -> IRecorder [arrowhead=ediamond];

edge [color=darkturquoise];
Global -> AllSpikingNeurons [arrowhead=ediamond];
GPUSpikingCluster -> AllSpikingNeuronsProps [arrowhead=ediamond];
SimulationInfo -> IAllNeuronsProps [arrowhead=ediamond];
ClusterInfo -> IAllNeuronsProps [arrowhead=ediamond];
Layout -> IAllNeuronsProps [arrowhead=ediamond];

edge [color=darkgoldenrod];
Global -> ClusterInfo [arrowhead=ediamond];
curand_kernel -> ClusterInfo [arrowhead=ediamond];
Global -> InterClustersEventHandler [arrowhead=ediamond];
AllSynapses -> SynapseIndexMap [arrowhead=ediamond];
Timer -> SynapseIndexMap [arrowhead=ediamond];
BGTypes -> SynapseIndexMap [arrowhead=ediamond];
ISInput -> GPUSpikingCluster [arrowhead=ediamond];
MersenneTwister_d -> GPUSpikingCluster [arrowhead=ediamond];

edge [color=gold];
SimulationInfo -> IAllSynapsesProps [arrowhead=ediamond];
ClusterInfo -> IAllSynapsesProps [arrowhead=ediamond];
EventQueue -> AllSpikingSynapses [arrowhead=ediamond];
AllSpikingNeurons -> AllSpikingSynapses [arrowhead=ediamond];
Global -> IAllSynapses [arrowhead=ediamond];
SimulationInfo -> IAllSynapses [arrowhead=ediamond];
ClusterInfo -> IAllSynapses [arrowhead=ediamond];
IAllNeuronsProps -> IAllSynapses [arrowhead=ediamond];

edge [color=darkturquoise];
Layout -> IAllNeurons [arrowhead=ediamond];
ClusterInfo -> IAllNeurons [arrowhead=ediamond];

edge [color=darkgoldenrod];
tinyxml -> Model [arrowhead=ediamond];
ParseParamError -> Model [arrowhead=ediamond];
Util -> Model [arrowhead=ediamond];
ConnGrowth -> Model [arrowhead=ediamond];
ISInput -> Model [arrowhead=ediamond];
Coordinate -> Model [arrowhead=ediamond];
tinyxml -> IModel [arrowhead=ediamond];
Global -> IModel [arrowhead=ediamond];
IAllNeurons -> IModel [arrowhead=ediamond];
IAllSynapses -> IModel [arrowhead=ediamond];
IRecorder -> IModel [arrowhead=ediamond];
Connections -> IModel [arrowhead=ediamond];
Layout -> IModel [arrowhead=ediamond];

edge [color=darksalmon];
Global -> ISInput [arrowhead=ediamond];
SimulationInfo -> ISInput [arrowhead=ediamond];
IModel -> ISInput [arrowhead=ediamond];
tinyxml -> ISInput [arrowhead=ediamond];

edge [color=hotpink];
ParseParamError -> ConnGrowth [arrowhead=ediamond];
XmlGrowthRecorder -> ConnGrowth [arrowhead=ediamond];
Hdf5GrowthRecorder -> ConnGrowth [arrowhead=ediamond];
Global -> ConnGrowth [arrowhead=ediamond];

edge [color=darkorange];
AllIFNeurons -> Hdf5GrowthRecorder [arrowhead=ediamond];
ConnGrowth -> Hdf5GrowthRecorder [arrowhead=ediamond];
Model -> Hdf5GrowthRecorder [arrowhead=ediamond];
H5Cpp -> Hdf5GrowthRecorder [arrowhead=ediamond];
AllIFNeurons -> Hdf5Recorder [arrowhead=ediamond];
H5Cpp -> Hdf5Recorder [arrowhead=ediamond];

edge [color=darkturquoise];
Global -> AllIFNeurons [arrowhead=ediamond];
ParseParamError -> AllIFNeuronsProps [arrowhead=ediamond];

edge [color=darkorange];
AllIFNeurons -> XmlGrowthRecorder [arrowhead=ediamond];
ConnGrowth -> XmlGrowthRecorder [arrowhead=ediamond];
Model -> XmlGrowthRecorder [arrowhead=ediamond];
AllIFNeurons -> XmlRecorder [arrowhead=ediamond];
ConnGrowth -> XmlRecorder [arrowhead=ediamond];

edge [color=darkgoldenrod];
Global -> Simulator [arrowhead=ediamond];
ISInput -> Simulator [arrowhead=ediamond];

edge [color=darksalmon];
tinyxml -> FSInput [arrowhead=ediamond];
curand_kernel -> GpuSInputPoisson [arrowhead=ediamond];
tinyxml -> SInputPoisson [arrowhead=ediamond];
AllDSSynapses -> SInputPoisson [arrowhead=ediamond];
tinyxml -> SInputRegular [arrowhead=ediamond];
tinyxml -> HostSInputPoisson [arrowhead=ediamond];

edge [color=darkgoldenrod];
AllLIFNeurons -> FClassOfCategory [arrowhead=ediamond];
AllIZHNeurons -> FClassOfCategory [arrowhead=ediamond];
AllDSSynapses -> FClassOfCategory [arrowhead=ediamond];
AllSTDPSynapses -> FClassOfCategory [arrowhead=ediamond];
AllDynamicSTDPSynapses -> FClassOfCategory [arrowhead=ediamond];
ConnGrowth -> FClassOfCategory [arrowhead=ediamond];
ConnStatic -> FClassOfCategory [arrowhead=ediamond];
FixedLayout -> FClassOfCategory [arrowhead=ediamond];
DynamicLayout -> FClassOfCategory [arrowhead=ediamond];
ParseParamError -> FClassOfCategory [arrowhead=ediamond];
Global -> FClassOfCategory [arrowhead=ediamond];

edge [color=indianred];
ParseParamError -> DynamicLayout [arrowhead=ediamond];
Util -> DynamicLayout [arrowhead=ediamond];
ParseParamError -> FixedLayout [arrowhead=ediamond];
Util -> FixedLayout [arrowhead=ediamond];

edge [color=hotpink];
ParseParamError -> ConnStatic [arrowhead=ediamond];
XmlRecorder -> ConnStatic [arrowhead=ediamond];
Hdf5Recorder -> ConnStatic [arrowhead=ediamond];
Global -> ConnStatic [arrowhead=ediamond];

edge [color=darkturquoise];
ParseParamError -> AllIZHNeuronsProps [arrowhead=ediamond];
ParseParamError -> AllLIFNeurons [arrowhead=ediamond];
AllSpikingSynapses -> AllLIFNeurons [arrowhead=ediamond];
}//End digraph declaration
